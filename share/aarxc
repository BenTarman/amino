#!/bin/sh

# Copyright (c) 2015, Rice University
# All rights reserved.
#
# Author(s): Neil T. Dantam <ntd@rice.edu>
#
#  Redistribution and use in source and binary forms, with or without
#  modification, are permitted provided that the following conditions
#  are met:
#   * Redistributions of source code must retain the above copyright
#     notice, this list of conditions and the following disclaimer.
#   * Redistributions in binary form must reproduce the above
#     copyright notice, this list of conditions and the following
#     disclaimer in the documentation and/or other materials provided
#     with the distribution.
#   * Neither the name of the copyright holder nor the names of its
#     contributors may be used to endorse or promote products derived
#     from this software without specific prior written permission.
#  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
#  "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
#  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
#  FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
#  COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
#  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
#  (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
#  SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
#  HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
#  STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
#  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
#  OF THE POSSIBILITY OF SUCH DAMAGE.


AARX_SCENE_NAME=""
AARX_MESH_UP_AXIS="Z"
AARX_MESH_FORWARD_AXIS="Y"
AARX_RELOAD="nil"

export AARX_CAMERA_UP="0 0 1"
export AARX_CAMERA_EYE="1 1 1"
export AARX_CAMERA_LOOK="0 0 0"
export AARX_POV_X="640"
export AARX_POV_Y="480"

parse_long() {
    echo "$1" | cut -d = -f 2
}

AARX_MEMORY_DEFAULT="2GB"

if [ -n "$AARX_RELOAD" ]; then
    AARX_RELOAD=t
fi

while test "$1" != x-- -a "x$#" != x0; do
    case "$1" in
        -h|-\?|--help)
            cat <<EOF
Usage: aarxc [OPTION] scene-files...
Generate C and POV-ray code from scene graphs

Options:

  -o OUTPUT_FILE                 write generated C code to OUTPUT_FILE
  -n SCENE_NAME                  name of the scene graph

  -s SCENE_FILE                  write loaded scene graph to SCENE_FILE

  -p POVRAY_FILE                 write generated POV-Ray code to POVRAY_FILE
  --render                       Render the image (default: no)
  -P POVRAY_FILE                 Same as -p and --render
  --pov-include=INCLUDE_FILE     Include INCLUDE_FILE in povray code
  --pov-x=PIXELS                 Image X dimension (default: $AARX_POV_X)
  --pov-y=PIXELS                 Image Y dimension (default: $AARX_POV_Y)

  --cam-up=VECTOR                Camera up vector (default: "$AARX_CAMERA_UP")
  --cam-eye=VECTOR               Camera eye vector (default: "$AARX_CAMERA_EYE")
  --cam-look=VECTOR              Camera look vector (default: "$AARX_CAMERA_LOOK")

  --var=NAME                     Name of configuration variable to set
  --val=VALUE                    Value of previously named configuration variable

  -U UP_AXIS                     up axis of mesh files
  -F FORWARD_AXIS                forward axis of mesh files
  -R|--reload                    reload files

  -g,--gui                       Display scene in a GUI
  --end-effector=FRAME           Set an frame for interactive GUI control
  --list-frames                  List all frames in the scene graph
  --list-vars                    List all configuration variables in the scene graph
  --version,                     output version information and exit
  -h|-?|--help,                  display this help and exit

Environment:

  ROS_PACKAGE_PATH               Location of ROS packages, necessary to load URDF

  AARX_MEMORY                    Maximum heap memory size ($AARX_MEMORY_DEFAULT)

  AARX_TMPDIR                    Directory for temporary and cache files (/tmp/amino-USERNAME)

Files:

  /tmp/amino-USERNAME            Default directory for temporary and cache files, set via \$AARX_TMPDIR

Examples:

  aarxc robot.urdf -o out.c       Generate out.c from URDF file robot.urdf

  aarxc --gui robot.urdf          Display robot.urdf in the OpenGL viewer

  aarxc robot.urdf -P out.pov     Generate out.pov and render image out.png

  aarxc robot.urdf -s out.robray  Convert URDF to scene file out.robray

Report bugs to <ntd@rice.edu>"
EOF
            exit 0
            ;;
        # C Options
        -o)
            shift
            export AARX_OUTPUT="$1";
            ;;
        -n)
            shift
            export AARX_SCENE_NAME="$1";
            ;;

        -s)
            shift
            export AARX_SCENE_OUT="$1";
            ;;

        # Configs
        --var=*)
            tmp_var=`parse_long "$1"`
            ;;
        --val=*)
            tmp_val=`parse_long "$1"`
            export AARX_CONFIG="$AARX_CONFIG (\"$tmp_var\" . $tmp_val)";
            ;;

        # POV-Ray Options
        -p)
            shift
            export AARX_POVRAY="$1";
            ;;
        --render)
            export AARX_RENDER=1
            ;;
        -P)
            shift
            export AARX_POVRAY="$1";
            export AARX_RENDER=1
            ;;
        --pov-include=*)
            tmp=`parse_long "$1"`
            export AARX_POV_INCLUDE="$AARX_POV_INCLUDE \"$tmp\""
            ;;
        --pov-x=*)
            AARX_POV_X=`parse_long "$1"`
            ;;
        --pov-y=*)
            AARX_POV_Y=`parse_long "$1"`
            ;;

        # Camera
        --cam-up=*)
            AARX_CAMERA_UP=`parse_long "$1"`
            ;;
        --cam-eye=*)
            AARX_CAMERA_EYE=`parse_long "$1"`
            ;;
        --cam-look=*)
            AARX_CAMERA_LOOK=`parse_long "$1"`
            ;;

        # Mesh Options
        -U)
            shift
            export AARX_MESH_UP_AXIS="$1";
            ;;
        -F)
            shift
            export AARX_MESH_FORWARD_AXIS="$1";
            ;;
        -R|--reload)
            export AARX_RELOAD=t
            ;;

        # Control Options
        --gui|-g)
            export AARX_GUI=t
            ;;
        --end-effector=*)
            export AARX_END_EFFECTOR=`parse_long "$1"`
            ;;
        --list-frames)
            export AARX_LIST_FRAMES="1"
            ;;
        --list-vars)
            export AARX_LIST_VARS="1"
            ;;
        --version)
            export AARX_VERSION="1"
            ;;
        --version-man)
            export AARX_VERSION_MAN="1"
            ;;
        -*)
            echo "error: unknown option: $1"
            exit 1
            ;;
        *)
            export AARX_SCENE="$AARX_SCENE \"$1\""
            ;;
    esac
    shift
done

if test -z "$AARX_MEMORY"; then
    AARX_MEMORY="$AARX_MEMORY_DEFAULT"
fi


if test -z "$AARX_SCENE" -a -z "$AARX_VERSION" -a -z "$AARX_VERSION_MAN"; then
    >&2 echo "aarxc: error: no input scene"
    >&2 echo "see \`aarxc --help' for usage"
    exit 1
fi

# Inform Lisp that it running the scene compiler
export AARXC="1"

exec aarx.core --dynamic-space-size "$AARX_MEMORY" \
     --non-interactive \
     --no-userinit \
     --eval '(robray::aarx-command)'
