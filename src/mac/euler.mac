/*
 * Copyright (c) 2010-2011, Georgia Tech Research Corporation
 * All rights reserved.
 *
 * Author(s): Neil T. Dantam <ntd@gatech.edu>
 * Georgia Tech Humanoid Robotics Lab
 * Under Direction of Prof. Mike Stilman
 *
 *
 * This file is provided under the following "BSD-style" License:
 *
 *
 *   Redistribution and use in source and binary forms, with or
 *   without modification, are permitted provided that the following
 *   conditions are met:
 *
 *   * Redistributions of source code must retain the above copyright
 *     notice, this list of conditions and the following disclaimer.
 *
 *   * Redistributions in binary form must reproduce the above
 *     copyright notice, this list of conditions and the following
 *     disclaimer in the documentation and/or other materials provided
 *     with the distribution.
 *
 *   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND
 *   CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
 *   INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
 *   MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 *   DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
 *   CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 *   SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 *   LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
 *   USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED
 *   AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 *   LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
 *   ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 *   POSSIBILITY OF SUCH DAMAGE.
 *
 */

/* generate*/
load("./amino.mac")$
load(f90)$

X : [ 1, 0, 0 ]$
Y : [ 0, 1, 0 ]$
Z : [ 0, 0, 1 ]$

/* Note, GCC's optimizer will eliminate redundant calls to sin/cos
(merging them to sincos).  No need to worry about that here */

with_stdout("aa_tf_euler.f90",

  /*-- Euler ZYX --*/

  print("subroutine aa_tf_eulerzyx2rotmat(e, R) &"),
  print("  bind( C, name=\"aa_tf_eulerzyx2rotmat\" )" ),
  print("  real(C_DOUBLE), intent(in)  :: e(3)"),
  print("  real(C_DOUBLE), intent(out) :: R(3,3)"),
  f90( R =  submatrix(4, tf_rotz(e(1)) . tf_roty(e(2)) . tf_rotx(e(3)), 4 )
    ),
  print("End subroutine aa_tf_eulerzyx2rotmat") ,

  print("subroutine aa_tf_eulerzyx2quat(e, q) &"),
  print("  bind( C, name=\"aa_tf_eulerzyx2quat\" )" ),
  print("  real(C_DOUBLE), intent(in)  :: e(3)"),
  print("  real(C_DOUBLE), intent(out) :: q(4)"),
  f90( q =
    qmul( qmul( qaxang(e(1),Z), qaxang(e(2),Y)), qaxang(e(3),X) ) ),
  print("End subroutine aa_tf_eulerzyx2quat")

)$

