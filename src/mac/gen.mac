/* -*- mode: maxima -*- */
/*
 * Copyright (c) 2010, Georgia Tech Research Corporation
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 *     * Redistributions of source code must retain the above
 *       copyright notice, this list of conditions and the following
 *       disclaimer.
 *     * Redistributions in binary form must reproduce the above
 *       copyright notice, this list of conditions and the following
 *       disclaimer in the documentation and/or other materials
 *       provided with the distribution.
 *     * Neither the name of the Georgia Tech Research Corporation nor
 *       the names of its contributors may be used to endorse or
 *       promote products derived from this software without specific
 *       prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY GEORGIA TECH RESEARCH CORPORATION ''AS
 * IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
 * FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL GEORGIA
 * TECH RESEARCH CORPORATION BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
 * OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 */

/* generate*/
load("./amino.mac");

with_stdout("mac.f",
  /* Quaternion Rotation */
  print("      Subroutine aa_tf_qrot (q, v, p)"),
  print("      Double Precision q(4)"),
  print("      Double Precision v(3)"),
  print("      Double Precision p(3,1)"),
  fortran( p = submatrix(4,transpose(qrot([q(1), q(2), q(3), q(4)], [v(1), v(2), v(3)])) )),
  print("      Return"),
  print("      End"),

  /* 3x3 inverse */
  print("      Subroutine aa_la_inverse3x3 (R, S)"),
  print("      Double Precision R(3,3)"),
  print("      Double Precision S(3,3)"),
  for i:1 thru 3 do
  for j:1 thru 3 do
  printf( true, "      Double Precision R~d~d~%", i, j ),
  for i:1 thru 3 do
  for j:1 thru 3 do
  printf( true, "      R~d~d = R(~d,~d)~%", i, j, i, j ),
  fortran( S = invert(matrix(
        [R11,R12,R13],
        [R21,R22,R23],
        [R31,R32,R33])) ),
  print("      Return"),
  print("      End"),

  /* 3x3 determinant */
  print("      Subroutine aa_la_det3x3 (R, d)"),
  print("      Double Precision R(3,3)"),
  print("      Double Precision d"),
  fortran( d = determinant(matrix(
        [R(1,1),R(1,2),R(1,3)],
        [R(2,1),R(2,2),R(2,3)],
        [R(3,1),R(3,2),R(3,3)])) ),
  print("      Return"),
  print("      End"),

  /* 93 tf */
  print("      Subroutine aa_tf_93 (R, v, p0, p1)"),
  print("      Double Precision R(3,3)"),
  print("      Double Precision v(3)"),
  print("      Double Precision p0(3)"),
  print("      Double Precision p1(3,1)"),
  fortran( p1 =
    matrix([R(1,1),R(1,2),R(1,3)],
      [R(2,1),R(2,2),R(2,3)],
      [R(3,1),R(3,2),R(3,3)])
      . [p0(1),p0(2), p0(3)]
      + [v(1), v(2), v(3)]),
  print("      Return"),
  print("      End"),

  /* 93 inverse */
  print("      Subroutine aa_tf_93inv (R, v, Ri, vi)"),
  print("      Double Precision R(3,3)"),
  print("      Double Precision v(3)"),
  print("      Double Precision Ri(3,3)"),
  print("      Double Precision vi(3,1)"),
  fortran( Ri = transpose(matrix(
        [R(1,1),R(1,2),R(1,3)],
        [R(2,1),R(2,2),R(2,3)],
        [R(3,1),R(3,2),R(3,3)])) ),
  fortran( vi = transpose(matrix(
        [R(1,1),R(1,2),R(1,3)],
        [R(2,1),R(2,2),R(2,3)],
        [R(3,1),R(3,2),R(3,3)]))
    . -[v(1), v(2), v(3)] ),
  print("      Return"),
  print("      End")

  );
