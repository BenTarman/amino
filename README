OVERVIEW
=========

Amino is library of basic utilities for robotics software.  It covers
mathematical and linear algebra routines, memory management,
time-handling, and various utilities.

FEATURES
========

Extensive SE(3) Support
-----------------------
* Menagerie of Representations:
  - Rotation and Transformation Matrices
  - Ordinary Quaternions
  - Dual Quaternions
  - Quaternion-Vector
  - Axis-Angle / Rotation-Vector / Log-map
  - Euler Angles
* Derivatives and Exact Integration
* Numerically stable log and exponential

Region-based Memory Allocation
------------------------------
* Container for LIFO-ordered memory allocation
* O(1) allocation and deallocation

Linear Algebra
---------------
* Lightweight LAPACK wrapper:
  Handles work-array creation for LAPACK using memory regions
* Multiple Runge-Kutta integrators, including adaptive integrators

Ray Tracing
-----------
* Import robot geometry from URDF and Collada
* Generate POV-ray scene files for animation frames
* Distribute POV-ray rendering over multiple machines

DEPENDENCIES
============

Required
--------
* BLAS / LAPACK
* Maxima (build-time dependency only)

Optional
--------
* cl-ppcre: http://weitz.de/cl-ppcre/
* Sycamore: https://github.com/ndantam/sycamore
* CXML: https://common-lisp.net/project/cxml/
* POV-Ray: http://www.povray.org/
* Blender: http://www.blender.org
* avconv: https://libav.org/

INSTALLATION
============

    ./configure && make && make install

See the INSTALL file and `./configure --help` for details.

RAY TRACING PERFORMANCE
=======================

Ray tracing is computationally expensive.  Here are a few notes to
help performance.

Distribute
-----------
Ray tracing is embarassingly parallel, both across multiple frames and
across pixels within a frame.  The easiest way to render faster is to
throw more cores at the problem.

Parsing
-------
While POV-Ray can use multiple threads to render a frame, parsing the
input file uses only a single core.  If large meshes are used, this
can take a noticeable amount of time, and must be repeated for each
frame.  Consequently, rather than using multiple threads per frame, it
may often be better to render multiple frames in parallel so that
parsing is parallelized across the different frames.

POV-Ray Compilation
-------------------
Ray tracing is floating-point heavy.  A few compilation flags make a
small but noticable (~10%) improvement in performance.

* -march=native: optimize for the current CPU.  This may take
   advantage of FPU instructions available on newer CPUs, e.g., AVX.
* -ffast-math: optimize floating-point computation in ways that my
   violate IEEE semantics.  Note that this could flag may slightly
   change the resulting image.
* -flto: enable link-time optimization.  This optimizes across
   multiple translation units.

FAQ
===

SE(3)
-----

* Why dual quaternions?

  - Dual quaternions are more compact and easier, computationally, to
    normalize and filter than matrices.

Scene Graphs
------------

* How can I load a URDF file?

  - Use the scene graph compiler, `arxc`, to generate code from the
    URDF file.

* How can I reload a modified scene graph file without restarting my
  program?

  - Compile the scene graph to a shared library and load the library
    with dlopen().  To reload the scene graph, recompile the scene
    graph and dlopen() the library again.
